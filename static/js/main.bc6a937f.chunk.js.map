{"version":3,"sources":["TopNavigator.js","EchelonInput.js","StaticData.js","DistributionTable.js","serviceWorker.js","index.js"],"names":["TopNavigator","react_default","a","createElement","className","href","src","window","location","origin","alt","Component","EchelonInput","role","id","type","placeholder","ORGANIZATIONS","DistributionTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","title","addRowButton","countInput","tableBody","colspan","getOragnizationOptions","map","org","value","Boolean","hostname","match","ReactDOM","render","src_TopNavigator","document","getElementById","src_EchelonInput","src_DistributionTable_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiBeA,yLAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCACNJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,OAAOC,SAASC,OAAS,mBAAoBC,IAAI,mBAE7DT,EAAAC,EAAAC,cAAA,mBARiBQ,cCkBZC,mLAhBX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,QAAMU,KAAK,OAAOT,UAAU,uCAC1BH,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBU,GAAG,gBAAtC,iBAEFb,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOX,UAAU,eAAeY,YAAY,kBAXvCL,aCHrBM,SAAgB,CAClB,mDACA,qDC6DWC,cAzDX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQR,EAAMQ,MAFJ,OAKfP,EAAKQ,aACD3B,EAAAC,EAAAC,cAAA,UAAQC,UAFgB,qCAEgBW,KAAK,UAA7C,4BAIJK,EAAKS,WACD5B,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOX,UAAU,wBAAwBY,YAAY,iBAErEI,EAAKU,UAAa7B,EAAAC,EAAAC,cAAA,aACdF,EAAAC,EAAAC,cAAA,MAAIW,GAAG,YACHb,EAAAC,EAAAC,cAAA,MAAI4B,QAAQ,KACR9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVgB,EAAKQ,aACN3B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YACbgB,EAAKY,0BAETZ,EAAKS,eArBPT,wFA6Bf,OAAOH,EAAcgB,IACjB,SAAAC,GACI,OAAOjC,EAAAC,EAAAC,cAAA,UAAQgC,MAAOD,GAAMA,wEAUpC,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,6CACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,8BAGPmB,KAAKO,mBAnDMnB,aCKZyB,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCRNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAAkBC,SAASC,eAAe,kBAC1DJ,IAASC,OAAOvC,EAAAC,EAAAC,cAACyC,EAAD,MAAkBF,SAASC,eAAe,kBAC1DJ,IAASC,OAGDvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,QAAMU,KAAK,OAAOT,UAAU,uCACxBH,EAAAC,EAAAC,cAAA,2EAEJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0C,EAAD,QAIfH,SAASC,eAAe,gBDmGnB,kBAAmBG,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc6a937f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './bootstrap.min.css';\n\nclass TopNavigator extends Component {\n  render() {\n    return (\n      <div className=\"text-center\">\n          <br/>\n          <a href=\"https://www.hwwtc.mohw.gov.tw/\">\n            <img src={window.location.origin + '/img/nav_top.png'} alt=\"Top Navigator\"></img>\n          </a>\n          <br/>\n      </div>\n    );\n  }\n}\n\nexport default TopNavigator;\n","import React, { Component } from 'react';\nimport './bootstrap.min.css';\n\nclass EchelonInput extends Component {\n  render() {\n    return (\n      <div className=\"col-md-12 ml-sm-auto col-lg-12 px-4\">\n        <main role=\"main\" className=\"col-md-12 ml-sm-auto col-lg-12 px-4\">\n          <h3>梯次</h3>\n        </main>\n        <div className=\"input-group mb-3 col-md-10 mx-auto\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">梯次</span>\n          </div>\n          <input type=\"text\" className=\"form-control\" placeholder=\"195T\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EchelonInput;\n","const ORGANIZATIONS = [\n    '台北市政府社會局',\n    '新北市政府社會局',\n];\n\nexport { ORGANIZATIONS };","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport './DistributionTable.css';\nimport { ORGANIZATIONS } from './StaticData';\n\nclass DistributionTable extends Component {\n    constructor(props) {\n        super(props);\n        this.title = props.title;\n\n        const addRowButtonClasses = \"btn btn-outline-secondary col-md-2\";\n        this.addRowButton = (\n            <button className={addRowButtonClasses} type=\"button\">\n                增加單位\n            </button>\n        );\n        this.countInput = \n            <input type=\"text\" className=\"form-control col-md-4\" placeholder=\"名額\"/>;\n\n        this.tableBody = (<tbody>\n            <tr id=\"inputRow\">\n                <td colspan=\"2\">\n                    <div className=\"input-group mb-3\">\n                        {this.addRowButton}\n                        <select className=\"col-md-6\">\n                            {this.getOragnizationOptions()}\n                        </select>\n                        {this.countInput}\n                    </div>\n                </td>\n            </tr>\n        </tbody>);\n    }\n\n    getOragnizationOptions() {\n        return ORGANIZATIONS.map(\n            org => {\n                return <option value={org}>{org}</option>;\n            }\n        );\n    }\n\n    addRow() {\n        // list\n    }\n\n    render() {\n        return (\n            <div className=\"table-responsive col-md-12\">\n                <table className=\"table table-bordered table-hover table-sm\">\n                    <thead>\n                        <tr>\n                            <th className=\"unit\">分發單位</th>\n                            <th className=\"count\">剩餘名額</th>\n                        </tr>\n                    </thead>\n                    {this.tableBody}\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default DistributionTable;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopNavigator from './TopNavigator';\nimport EchelonInput from './EchelonInput';\nimport DistributionTable from './DistributionTable';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TopNavigator />, document.getElementById('top_navigator'));\nReactDOM.render(<EchelonInput />, document.getElementById('echelon_input'));\nReactDOM.render(\n\t(\n\n        <div className=\"col-md-12 ml-sm-auto col-lg-12 px-4\">\n            <main role=\"main\" className=\"col-md-12 ml-sm-auto col-lg-12 px-4\">\n                <h3>家庭因素（返家住宿）</h3>\n            </main>\n            <div>\n                <DistributionTable />\n            </div>\n        </div>\n    ),\n\tdocument.getElementById('home_coming'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}